服务器在loop 中运行，等待可能来的请求

账号管理
    登录
        1.
            docker login
        2.
            docker login --username=rancheng  registry.cn-beijing.aliyuncs.com



    创建token（密码的另一种形式，更加安全）
        docker secret create dockerhubAccessToken token.json

        token.json 的内容
        {
          "username":"DockerHubUserName",
          "password":"DockerHubAccessToken"
        }


镜像
    1.创建dockerfile，写入命令（参考Dockerfile 文件）

    2.构建镜像 （一个镜像由manifest 和一系列的层 组成）
      代码有改动，需要重新构建镜像
        #--tag ea-docker  给镜像起名字
        #--target test  指定构建阶段（dockerfile 内部可以写多个阶段）

        docker build --tag ea-docker .

    3.查看新生成的镜像
        docker images

    4.给镜像打tag （打第二个tag，一个镜像可以有多个tag）
        docker tag rancheng/ea-image:latest rancheng/ea-image:v1.0.0

    5.删除镜像(如果有多个tag,只是删除了其中一个tag的引用，没有真正删除镜像)
        docker rmi ea-docker:v1.0.0

        删除全部镜像
        #-q 只返回Id
        #-a 显示全部
        docker rmi -f $(docker images -qa)

    6.推送镜像
        docker push rancheng/ea-image:latest

    7.拉取镜像
        docker pull rancheng/ea-image:latest


容器
    6.启动容器,镜像在容器中运行。(本地无此镜像，先pull,再 run)

        #--detach or -d （与terminal解绑，以后台模式运行， 将terminal 控制权交给你）
        #--publish 8000:8000  形成端口映射
        #--name ea-container 给容器起个名字
        #--network mongodb  指定网络
        #-e CONNECTIONSTRING=mongodb://mongodb:27017/yoda_notes  指定环境变量
        #-it  交互式和打开终端
        #--rm  ???


        docker run -detach --publish 8000:8000 --name ea-container ea-docker

    6.重启容器（容器名称，容器id）
        docker restart ea-container

    7.查看容器（默认只展示运行中的）

        #--all or -a  查看全部容器（包括运行中的和停止的）

        docker ps

    8.停止容器,但未删除（容器id, 容器名字）
        docker stop ea-container

        停止全部容器
        #-q 只返回containerId
        #-a 显示全部
        docker stop  $(docker ps -qa)

    9.删除容器(可以删除多个容器)
        docker rm ea-container containerName2 containerName3


    10.新建卷(用于存放 数据库数据和配置)
    docker volume create mongodb
    docker volume create mongodb_config

    11.查看卷
    docker volume ls

    12.创建网络(用于nodejs程序和数据库的通讯)
    docker network create mongodb






两个容器之间通讯

    1.启动js程序
    docker run \
      -it --rm -d \
      --network mongodb \     使用同一网络
      --name ea-container \
      -p 8000:8000 \
      -e CONNECTIONSTRING=mongodb://mongodb:27017/yoda_notes \
      ea-docker

    2.启动数据库
    docker run -it --rm -d -v mongodb:/data/db \
      -v mongodb_config:/data/configdb -p 27017:27017 \
      --network mongodb \    使用同一网络
      --name mongodb \
      mongo



使用docker-compose进行本地开发
    1. 创建compose文件 docker-compose.dev.yml


    docker-compose 超级超级方便
    可以一键启动多个docker 容器应用
    暴露9229端口，供调试nodejs
    映射本地资源与容器资源，本地改变，容器实时改变（nodemon + volumes映射）

    2.构建镜像，并且启动容器

        #up       启动容器
        #--build  构建镜像
        #run ea npm run test 启动容器，并执行内部的npm run test 命令

    docker-compose -f docker-compose.dev.yml up --build
    docker-compose -f docker-compose.dev.yml run ea npm run test

生产单元测试镜像，并且启动运行单元测试
    docker build -t node-docker --target test .
    docker run -it --rm -p 8000:8000 node-docker



CICD
    1.github(开源仓库，不安全。 推荐用gitlab)

        1.注册dockerhub 账号，拿到dockerID       （相当于dockerhub 用户名）
        2.在dockerhub 创建Personal Access Token （相当于dockerhub 密码的另一种更安全形式，当登录dockerhub时会用到）
                进入https://hub.docker.com/settings/security，然后点击New Access Token.
                注意：token生产后，一定要找地方保存下来。dockerhub只展示一次，否则会丢失


                我自己的token   050c59d4-1639-4ad9-a987-1c29f8b1a9d3

        3.将自己的项目放入github上

        4.github 与 dockerhub 关联

            添加dockerID和token 到github项目中(相当于把dockerhub 的用户名和密码 放入了github上)
            进入你的项目仓库，点击Settings > Secrets > New secret.（创建两个secret,分别存放dockerID和token）

            详见 ./github secret.jpeg


        5. 设置github actions workflow

            进入你的项目仓库，点击Actions(这里不是settings里的actions) > New workflow.
            github 生成一个 yml文件（用于配置工作流），写完后，提交到项目中，此文件会存放在.github/workflows目录中

        6. 设置完workflow之后，可以执行命令git push， 然后可以看到github的actions里面有新生成的workflow


        7. 未读完的
            https://docs.docker.com/language/nodejs/configure-ci-cd/

                Now, let’s set up a second GitHub action file to store our latest commit as an image in the GitHub registry. You may want to do this to


    2.gitlab
        1.新建.gitlab-ci.yml 文件 放入项目根目录。
        2.push .gitlab-ci.yml 到gitlab 项目内，会触发pipelines,但是此时的job处于pending 状态

            CI->Pipelines
            使用CI Lint 测试你的.gitlab-ci.yml

            stuck代表没有配置Runner执行这个job




        3.配置一个Runner(本质是一个物理机或虚拟机或容器，用来执行job)
            注意： runner 不能与 gitlab 在同一台机器上

            按照下面的路径配置runner,可以选择共享runner（可以服务于多个项目）
            Settings ➔ CI/CD

            1.安装runner到本地 (在 MacOS上)
                sudo curl --output /usr/local/bin/gitlab-runner "https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64"
                sudo chmod +x /usr/local/bin/gitlab-runner
                cd ~
                gitlab-runner install
                gitlab-runner start


            2.注册一个runner(本质是将runner与gitlab实例绑定)

                gitlab-runner register

                    然后填入GitLab instance URL
                        https://gitlab.lanhuapp.com/
                    在填入token
                        KGZVzZMnyvP6pv4UchYY




部署app 到云端（Deploying Docker containers on ECS， 来源地址 https://docs.docker.com/cloud/ecs-integration/）

    1. 方案一（亚马逊EC2 Container Service (ECS) ）
        好处：
            从本地开发切换到云端部署
            使用组合文件进行  多容器应用开发

        需要一个AWS账号



    2.方案二（阿里云容器服务）

        1.需要支付宝实名认证
        1.云资源访问授权（Resource Access Management，RAM）
            阿里云创建不同的角色，每个角色有不同的权限

        2.为角色授权

        3.创建一个docker 集群(相当于在阿里云的机房里找一台机器)
            选择区域（华北，华南， 选择哪个区域的机房）
            资源组
            网络
            虚拟交换机





docker基础镜像包制作
    作用：
        1.优化发布docker镜像
        2.实现规范，不在各自为战，不在乱哄哄









正常的 build,push 全流程
        docker build --tag ea-front:latest  .

        #push 之前先打个新标签
        docker tag ea-front:latest  rancheng/ea-front:v1.0.0

        #push之前，先登录。防止报错denied: requested access to the resource is denied
        docker login --username=rancheng https://index.docker.io/v1

        docker push rancheng/ea-front:v1.0.0

push完之后，pull下来
        docker pull rancheng/ea-front:latest







        docker login --username=rancheng@1166112853771103 --password=Lanhu@2021 registry.cn-beijing.aliyuncs.com
        docker tag a98380055d03 registry.cn-beijing.aliyuncs.com/lanhu-ea/front:v1.0.0
        docker push registry.cn-beijing.aliyuncs.com/lanhu-ea/front:v1.0.0




不明白的？？？？？？？？？？？？？
    docker import - centos6-base




